# version: 2.1
# jobs:
#   say-hello:
#     docker:
#       - image: cimg/base:stable
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "Hello, World!"

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello

version: 2.1
orbs:
  slack: circleci/slack@4.1
jobs: # we now have TWO jobs, so that a workflow can coordinate them!          
  one: # This is our first job.
    docker: # it uses the docker executor
      - image: cimg/ruby:2.6.8 # specifically, a docker image with ruby 2.6.8
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    # Steps are a list of commands to run inside the docker container above.
    parallelism: 2
    steps:
      - checkout # this pulls code down from GitHub
      - run: echo "A first hello" # This prints "A first hello" to stdout.
      - run: sleep 25 # a command telling the job to "sleep" for 25 seconds.
  two: # This is our second job.
    docker: # it runs inside a docker image, the same as above.
      - image: cimg/ruby:3.0.2
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "A more familiar hi" # We run a similar echo command to above.
      - run: sleep 15 # and then sleep for 15 seconds.
  build:
      # Remove if parallelism is not desired
      parallelism: 2
      environment:
        # Configure the JVM and Gradle to avoid OOM errors
        _JAVA_OPTIONS: "-Xmx3g"
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      docker: # run the steps with Docker
        - image: cimg/openjdk:17.0.1 # ...with this image as the primary container; this is where all `steps` will run
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        - image: cimg/postgres:14.0
          auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
          environment:
            POSTGRES_USER: postgres
            POSTGRES_DB: circle_test
      steps: # a collection of executable commands
        - checkout # check out source code to working directory
        - run:
            name: 
            command: |
              chmod +x gradlew
              cd src/test/java/com/lyit/csd/tests/unit
              cd ../../../../../../../../
              ./gradlew test
        - save_cache:
            paths:
              - ~/.gradle/wrapper
            key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
        - save_cache:
            paths:
              - ~/.gradle/caches
            key: v1-gradle-cache-{{ checksum "build.gradle" }}
        - store_test_results:
        # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            path: build/test-results/test
        - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
            path: build/test-results/test
        - run:
            name: Assemble JAR
            command: |
              # Skip this for other nodes
              if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                ./gradlew assemble
              fi
        # As the JAR was only assembled in the first build container, build/libs will be empty in all the other build containers.
        - store_artifacts:
            path: build/libs
        # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples    
        - slack/notify:
            channel: 'CHANNEL'
            event: always
            template: basic_fail_1

workflows:
  version: 2.1
  commit:
    jobs:
      - one
      - two
      - build
  nightly:
    triggers:
      - schedule:
          cron: "0 17 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - one
      - two
      - build
